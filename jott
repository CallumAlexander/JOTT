#!/bin/bash



# Handle config file locations
jott_installed_config_file="$HOME/.config/jott/jott.cfg"
jott_local_config_file="./jott.cfg"  # Current working dir (make install not run yet)

if [ -f "$jott_installed_config_file" ]; then
    jott_config_file="$jott_installed_config_file"
elif [ -f "$jott_local_config_file" ]; then
    jott_config_file="$jott_local_config_file"
else
    echo "[-] JOTT Configuration file not found in either ~/.config/jott/ or in the current working directory."
    exit 1
fi

output_to_terminal() {
    local WORD="$1"
    local DEFINITION="$2"
    local RED='\e[31m'
    local BLUE='\e[34m'
    local NC='\e[39m'    # Reset color

    echo -e "${RED}Word:${NC} $WORD"
    echo -e "${BLUE}Definition:${NC}"
    echo -e "$DEFINITION"
}

get_formatted_query_term() {
    local formatted_word="$1"
    formatted_word=$(echo "$formatted_word" | sed 's/ /-/g')  # Replacing spaces with a dash
    formatted_word=$(echo "$formatted_word" | sed 's/!/-/g')  # Replacing exclamation marks with a dash
    formatted_word=$(echo "$formatted_word" | sed 's/&/-ampersand-/g')  # Replacing ampersand

    echo -e "$formatted_word"
}

fetch_specific_link_content() {
    local word="$1"
    local base_url="http://www.catb.org/jargon/html/"

    local formatted_word=$(echo "$word" | sed 's/ /-/g')  # Replacing spaces with a dash
    formatted_word=$(echo "$formatted_word" | sed 's/\//-/g')
    local character_dir=$(echo "$word" | tr '[:lower:]' '[:upper:]')
    local specific_url="${base_url}${character_dir:0:1}/${formatted_word}.html" # Construct URL
    local link_content=$(curl -s "$specific_url")
    
    if [ -z "$link_content" ]; then
        echo "Error: Unable to fetch content for word $word from $specific_url . The term may not exist!" >&2
        return 1
    fi

    echo "$link_content"

}

fetch_random_link_content() {
    local base_url="http://www.catb.org/jargon/html/"
    local specific_url="http://www.catb.org/jargon/html/go01.html"

    if links=$(timeout "${request_timeout}" curl -s "$specific_url"); then
        links=$(echo "$links" | grep -o '<a [^>]*href="[^"]*"[^>]*>' | sed 's/<a [^>]*href="\([^"]*\)"[^>]*>/\1/g' | grep -E '[A-Z0-9]/[^/]+\.html')
    else
        echo "Error: Unable to fetch content from $specific_url due to a timeout or possible connection problems"
        return 1
    fi

    if [ -z "$links" ]; then
        echo "No links found on the webpage."
        return 1
    fi

    IFS=$'\n' read -rd '' -a link_array <<< "$links"

    total_links="${#link_array[@]}"
    random_index=$((RANDOM % total_links))
    random_link="${link_array[random_index]}"
    full_url="$base_url$random_link"

    link_content=$(curl -s "$full_url")
    echo -e "$link_content"

}

handle_definition () {
    local LINK_CONTENT="$1"
    DEFINITION=$(echo "$LINK_CONTENT" | awk -v RS='</dd>' -F '<p>|</p>' '{gsub(/<a[^>]*>|<\/a>/, ""); print $2}')

    DEFINITION=$(echo "$DEFINITION" | tr '\n' ' ')  # Removes newlines
    DEFINITION=$(echo "$DEFINITION" | sed 's/  */ /g')  # Removes any doublespaces

    # Apply ANSI escape code replacement for proper unicode characters
    DEFINITION=$(echo "$DEFINITION" | sed 's/&#8220;/"/g')      # Open double quotes
    DEFINITION=$(echo "$DEFINITION" | sed 's/&#8221;/"/g')      # Close double quotes
    DEFINITION=$(echo "$DEFINITION" | sed 's/&#8216;/'\''/g')   # Open single quote
    DEFINITION=$(echo "$DEFINITION" | sed 's/&#8217;/'\''/g')   # Close single quote
    DEFINITION=$(echo "$DEFINITION" | sed 's/&#8212;/'â€”'/g')    # Dash-em

    if [ "$fancy" = true ]; then
        # Apply italics formatting using ANSI escape codes to <em> and <i> tags
        DEFINITION=$(echo "$DEFINITION" | sed -E 's|<i class="glossterm">([^<]+)</i>|\o033[4m\1\o033[0m|g')
        DEFINITION=$(echo "$DEFINITION" | sed -E 's|<i([^>]*)>([^<]+)<\/i>|\o033[3m\2\o033[0m|g')
        DEFINITION=$(echo "$DEFINITION" | sed -E 's|<em([^>]*)>([^<]+)<\/em>|\o033[3m\2\o033[0m|g')
    else
        # Remove the <i> tags, leaving the content
        DEFINITION=$(echo "$DEFINITION" | sed -E 's|<i([^>]*)>([^<]*)<\/i>|\2|g')
        DEFINITION=$(echo "$DEFINITION" | sed -E 's|<em([^>]*)>([^<]*)<\/em>|\2|g')
    fi

    # Remove span tags
    DEFINITION=$(echo "$DEFINITION" | sed 's/<span[^>]*>//g; s/<\/span>//g')
    # Remove leading and trailing whitespace
    DEFINITION=$(echo "$DEFINITION" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')


    # Manage definition output width
    if [ "$limit_definition_width" = true ]; then
        DEFINITION=$(echo "$DEFINITION" | fold -w "$definition_width" -s)
    fi 

    echo -e "$DEFINITION"

}

validate_config() {
    for validate_var in fancy no_header limit_definition_width; do
        actual_value=$(eval echo \$$validate_var)
        if [ "$actual_value" != "true" ] && [ "$actual_value" != "false" ]; then
            echo "Error: Invalid value for '$validate_var'. Expected 'true' or 'false',"
            exit 1
        fi
    done

    for validate_var in request_timeout definition_width; do
        actual_value=$(eval echo \$$validate_var)
        if ! [[ "$actual_value" =~ ^[0-9]+$ ]]; then
            if [ "$validate_var" == "request_timeout" ]; then
                eval $validate_var=2
            elif [ "$validate_var" == "definition_width" ]; then
                eval $validate_var=80
            else
                echo "Error: Invalid value for '$validate_var'. Expected a positive integer."
                exit 1
            fi
        fi
    done
}


source $jott_config_file
validate_config

jott_ascii_art="
     ____.______________________________
    |    |\\_____  \\__    ___/\\__    ___/
    |    | /   |   \\|    |     |    |   
/\\__|    |/    |    \\    |     |    |   
\\________|\\_______  /____|     |____|   
                  \\/                    
"

if [ "$no_header" = false ]; then
    echo -e "$jott_ascii_art"
    echo "Jargon Of The Terminal"
    echo -e "Courtesy of The on-line hacker Jargon File, version 4.4.7\n"
fi

# Search for methods
if [ "$1" = "-q" ] && [ -n "$2" ]; then
    link_content=$(fetch_specific_link_content "$2")
    WORD=$(echo "$link_content" | grep -o '<b>[^<]*</b>' | sed 's/<b>\(.*\)<\/b>/\1/')
    echo -e "$WORD"
    if [ -z "$WORD" ]; then
        echo -e "[-] ERROR: Unable to fetch content for word $2. The term probably doesn't exist (yet) in The Jargon File." >&2
        exit 1
    fi
    DEFINITION=$(handle_definition "$link_content")
    output_to_terminal "$WORD" "$DEFINITION"
    exit 0
fi

# Else no arguments, follow regular random definition output
LINK_CONTENT=$(fetch_random_link_content)
WORD=$(echo "$LINK_CONTENT" | grep -o '<b>[^<]*</b>' | sed 's/<b>\(.*\)<\/b>/\1/')
DEFINITION=$(handle_definition "$LINK_CONTENT")
output_to_terminal "$WORD" "$DEFINITION"

# Unsetting variables that could cause conflicts with other programs
unset URL BASE_URL LINKS WORD
